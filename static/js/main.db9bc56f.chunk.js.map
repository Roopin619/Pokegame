{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","name","this","props","type","img","exp","className","src","alt","Component","Pokedex","result","isWinner","pokeList","map","pokemon","key","id","number","slice","base_experience","Pokegame","hand1","hand2","length","randomIndex","Math","floor","random","randomPokemon","splice","push","exp1","exp2","forEach","console","log","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAsBeA,G,6KAjBP,IAAIC,EAAOC,KAAKC,MAAMF,KAClBG,EAAOF,KAAKC,MAAMC,KAClBC,EAAMH,KAAKC,MAAME,IACjBC,EAAMJ,KAAKC,MAAMG,IACrB,OACI,yBAAKC,UAAU,YACX,wBAAIA,UAAU,kBAAkBN,GAChC,yBAAKM,UAAU,kBACX,yBAAKC,IAAKH,EAAKI,IAAKR,KAExB,yBAAKM,UAAU,iBAAf,SAAsCH,GACtC,yBAAKG,UAAU,iBAAf,QAAqCD,Q,GAb9BI,cCiCRC,G,6KA1BP,IAAIC,EAOJ,OALIA,EADAV,KAAKC,MAAMU,SACF,wBAAIN,UAAU,kBAAd,gBAEA,wBAAIA,UAAU,iBAAd,eAIT,yBAAKA,UAAU,WACVK,EACD,wBAAIL,UAAU,eAAd,sBAAgDL,KAAKC,MAAMG,KAC3D,yBAAKC,UAAU,iBACVL,KAAKC,MAAMW,SAASC,KAAI,SAACC,GAAD,OACrB,kBAAC,EAAD,CAAUC,IAAKD,EAAQE,GACnBjB,KAAMe,EAAQf,KACdI,IAAG,UArBd,8DAqBc,QAnBXc,EAmBsCH,EAAQE,GAnBlCC,GAAU,IAAM,YAAKA,GAASC,OAAO,GAAKD,GAmB3C,QACHf,KAAMY,EAAQZ,KACdE,IAAKU,EAAQK,kBArBtB,IAACF,W,GAEET,cCLhBY,E,uKAiBE,IAFA,IAAIC,EAAQ,GACRC,EAAK,YAAOtB,KAAKC,MAAMW,UACpBS,EAAME,OAASD,EAAMC,QAAQ,CAChC,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC/CK,EAAgBN,EAAMO,OAAOL,EAAa,GAAG,GACjDH,EAAMS,KAAKF,GAGf,IAAIG,EAAO,EAAGC,EAAO,EAWrB,OAVAX,EAAMY,SAAQ,SAAAnB,GACViB,GAAQjB,EAAQK,mBAEpBG,EAAMW,SAAQ,SAAAnB,GACVkB,GAAQlB,EAAQK,mBAGpBe,QAAQC,IAAIJ,EAAMC,GAId,yBAAK3B,UAAU,YACX,kBAAC,EAAD,CAASO,SAAUS,EAAOjB,IAAK2B,EAAMpB,SAAUoB,EAAOC,IACtD,kBAAC,EAAD,CAASpB,SAAUU,EAAOlB,IAAK4B,EAAMrB,SAAUqB,EAAOD,S,GArC/CvB,aAAjBY,EACKgB,aAAe,CAClBxB,SAAU,CACN,CAAEI,GAAI,EAAGjB,KAAM,aAAcG,KAAM,OAAQiB,gBAAiB,IAC5D,CAAEH,GAAI,EAAGjB,KAAM,WAAYG,KAAM,QAASiB,gBAAiB,IAC3D,CAAEH,GAAI,GAAIjB,KAAM,UAAWG,KAAM,MAAOiB,gBAAiB,IACzD,CAAEH,GAAI,GAAIjB,KAAM,aAAcG,KAAM,SAAUiB,gBAAiB,KAC/D,CAAEH,GAAI,GAAIjB,KAAM,UAAWG,KAAM,WAAYiB,gBAAiB,KAC9D,CAAEH,GAAI,GAAIjB,KAAM,aAAcG,KAAM,SAAUiB,gBAAiB,IAC/D,CAAEH,GAAI,GAAIjB,KAAM,SAAUG,KAAM,SAAUiB,gBAAiB,KAC3D,CAAEH,GAAI,IAAKjB,KAAM,QAASG,KAAM,SAAUiB,gBAAiB,MAiCxDC,QClCAiB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.db9bc56f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Pokecard.css';\n\nclass Pokecard extends Component {\n    render() {\n        let name = this.props.name;\n        let type = this.props.type;\n        let img = this.props.img;\n        let exp = this.props.exp;\n        return (\n            <div className=\"Pokecard\">\n                <h3 className=\"Pokecard-title\">{name}</h3>\n                <div className=\"Pokecard-image\">\n                    <img src={img} alt={name} />\n                </div>\n                <div className=\"Pokecard-data\">Type: {type}</div>\n                <div className=\"Pokecard-data\">EXP: {exp}</div>\n            </div>\n        );\n    }\n}\n\nexport default Pokecard;","import React, { Component } from 'react';\nimport Pokecard from './Pokecard';\nimport './Pokedex.css';\n\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\n\nconst padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\n\nclass Pokedex extends Component {\n    render() {\n        let result;\n        if (this.props.isWinner) {\n            result = <h2 className=\"Pokedex-winner\">Winning Hand</h2>\n        } else {\n            result = <h2 className=\"Pokedex-loser\">Losing Hand</h2>\n        }\n\n        return (\n            <div className=\"Pokedex\">\n                {result}\n                <h5 className=\"Pokedex-exp\">Total Experience : {this.props.exp}</h5>\n                <div className=\"Pokedex-cards\">\n                    {this.props.pokeList.map((pokemon) => (\n                        <Pokecard key={pokemon.id}\n                            name={pokemon.name}\n                            img={`${POKE_API}${padToThree(pokemon.id)}.png`}\n                            type={pokemon.type}\n                            exp={pokemon.base_experience}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Pokedex;","import React, { Component } from 'react'\nimport Pokedex from './Pokedex';\n\nclass Pokegame extends Component {\n    static defaultProps = {\n        pokeList: [\n            { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n            { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n            { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n            { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n            { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n            { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n            { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n            { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n        ]\n    };\n\n    render() {\n        let hand1 = [];\n        let hand2 = [...this.props.pokeList];\n        while (hand1.length < hand2.length) {\n            let randomIndex = Math.floor(Math.random() * hand2.length);\n            let randomPokemon = hand2.splice(randomIndex, 1)[0];\n            hand1.push(randomPokemon);\n        }\n\n        let exp1 = 0, exp2 = 0;\n        hand1.forEach(pokemon => {\n            exp1 += pokemon.base_experience;\n        });\n        hand2.forEach(pokemon => {\n            exp2 += pokemon.base_experience;\n        });\n\n        console.log(exp1, exp2);\n        \n\n        return (\n            <div className=\"Pokegame\">\n                <Pokedex pokeList={hand1} exp={exp1} isWinner={exp1 > exp2} />\n                <Pokedex pokeList={hand2} exp={exp2} isWinner={exp2 > exp1} />\n            </div>\n        );\n    }\n}\n\nexport default Pokegame;","import React from 'react';\nimport './App.css';\nimport Pokegame from './Pokegame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}